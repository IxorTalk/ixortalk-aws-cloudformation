#
# MIT License
#
# Copyright (c) 2018 IxorTalk CVBA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

AWSTemplateFormatVersion: "2010-09-09"
Description: "Building blocks for Just-in-Time Registration of Device Certificates on AWS IoT"

Parameters:

  LambdaRoleName:
    Type: String

  FunctionName:
    Type: String

  IoTTopicRuleName:
    Type: String

  IotCaCertId:
    Type: String

  ProjectName:
    Type: String

Resources:
  RegisterIoTCertificateLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: iot-and-cloudwatch-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - "iot:UpdateCertificate"
                  - "iot:CreatePolicy"
                  - "iot:AttachPrincipalPolicy"
                Resource: "*"

  RegisterIoTCertificateLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref FunctionName
      Description: Lambda for jit cert registration for IoT devices.
      Handler: "index.handler"
      Role: !GetAtt [ RegisterIoTCertificateLambdaRole, Arn ]
      Environment:
        Variables:
          TOPIC_NAME: !Ref ProjectName
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');

          exports.handler = function(event, context, callback) {

              console.log("Entering lamba function with ",event)

              var region = process.env.AWS_REGION;

              var accountId = event.awsAccountId.toString().trim();

              var iot = new AWS.Iot({'region': region, apiVersion: '2015-05-28'});
              var certificateId = event.certificateId.toString().trim();

              var params = {
                certificateId: certificateId
              };

              var topicName = `/` + process.env.TOPIC_NAME;

              var certificateARN = `arn:aws:iot:${region}:${accountId}:cert/${certificateId}`;
              var policyName = `Policy_${certificateId}`;

              // Policy that allows connect, publish, subscribe and receive.
              var policy = {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Action": [
                              "iot:Connect"
                          ],
                          "Resource": `arn:aws:iot:${region}:${accountId}:client/${"${iot:Certificate.Subject.CommonName}"}`
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "iot:Publish",
                              "iot:Receive"
                          ],
                          "Resource": `arn:aws:iot:${region}:${accountId}:topic/${topicName}/${"${iot:Certificate.Subject.CommonName}"}/*`
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "iot:Subscribe",
                          ],
                          "Resource": `arn:aws:iot:${region}:${accountId}:topicfilter/${topicName}/${"${iot:Certificate.Subject.CommonName}"}/*`
                      }
                  ]
              };

              /*
              Step 1) Create a policy
              */
              iot.createPolicy({
                  policyDocument: JSON.stringify(policy),
                  policyName: policyName
              }, (err, data) => {
                  //Ignore if the policy already exists
                  if (err && (!err.code || err.code !== 'ResourceAlreadyExistsException')) {
                      console.log(err);
                      callback(err, data);
                      return;
                  }
                  console.log(data);

                  /*
                  Step 2) Attach the policy to the certificate
                  */
                  iot.attachPrincipalPolicy({
                      policyName: policyName,
                      principal: certificateARN
                  }, (err, data) => {
                      //Ignore if the policy is already attached
                      if (err && (!err.code || err.code !== 'ResourceAlreadyExistsException')) {
                          console.log(err);
                          callback(err, data);
                          return;
                      }
                      console.log(data);
                      /*
                      Step 3) Activate the certificate. Optionally, you can have your custom Certificate Revocation List (CRL) check
                      logic here and ACTIVATE the certificate only if it is not in the CRL. Revoke the certificate if it is in the CRL
                      */
                      iot.updateCertificate({
                          certificateId: certificateId,
                          newStatus: 'ACTIVE'
                      }, (err, data) => {
                          if (err) {
                              console.log(err, err.stack);
                              callback(err, data);
                          }
                          else {
                              console.log(data);
                              callback(null, "Success, created, attached policy and activated the certificate " + certificateId);
                          }
                      });
                  });
              });

          }


      Runtime: "nodejs6.10"
      Timeout: "25"

  RegisterIoTCertificateTopicRule:
    Type: "AWS::IoT::TopicRule"
    Properties:
      RuleName: !Ref IoTTopicRuleName
      TopicRulePayload:
        Actions:
          - Lambda:
              FunctionArn: !GetAtt RegisterIoTCertificateLambda.Arn
        RuleDisabled: false
        AwsIotSqlVersion: 2016-03-23
        Description: Aws IoT Rule for Just In Time Cert registration
        Sql: !Join [ "", [ "SELECT * FROM '$aws/events/certificates/registered/", !Ref IotCaCertId, "'" ]]

  RegisterIoTCertificateLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref FunctionName
      Principal: iot.amazonaws.com
      SourceArn: !GetAtt RegisterIoTCertificateTopicRule.Arn
