#
# MIT License
#
# Copyright (c) 2018 IxorTalk CVBA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  Subnets:
    Description: The Subnets the RDS instance that you want this lambda to create a database in, is deployed in
    Type: List<String>

  ECSHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The ECS host's security group

Description: >

  This template deploys a lambda function that will create x new databases with their users/passwords in the specified RDS databases

#Parameters:

Resources:

  #TODO: Create security group for lambda, S3 bucket should be reachable by non-ixor accounts
  RDSLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: ixortooling-prd-s3-lambda-function-store
        S3Key: rds-lambda.zip
      Handler: index.handler
      Role: !GetAtt RDSLambdaRole.Arn
      Runtime: nodejs8.10
      VpcConfig:
        SecurityGroupIds: !Split ["nonexistingvalue", !Ref ECSHostSecurityGroup]
        SubnetIds: !Ref Subnets

  RDSLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RDSLambdaRole
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: rds-access
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
            Resource: "*" #TODO Is this necessary?

