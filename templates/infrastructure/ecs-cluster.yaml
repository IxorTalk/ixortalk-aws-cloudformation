#
# MIT License
#
# Copyright (c) 2018 IxorTalk CVBA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

AWSTemplateFormatVersion: "2010-09-09"

Description: >
    This IxorTalk template deploys an ECS cluster to the provided VPC and subnets
    using an Auto Scaling Group

Parameters:

    Environment:
        Type: String
        Default: tst

    ECSBucket:
        Type: String

    ECSHostRole:
        Type: String

    HostedZoneName:
        Type: String

    InitialClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        MinValue: 0

    ECSHostInstanceType:
        Description: Which instance type should we use to build the ECS cluster?
        Type: String

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    EC2HostSSHKeyName:
        Description: The SSH key needed to login
        Type: String
        Default: ""

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    EFSFileSystemID:
        Description: The EFS file system ID
        Type: String

Conditions:
    EC2HostSSHKeyNameProvided: !Not [ !Equals ["", !Ref EC2HostSSHKeyName]]
    IsProd: !Or [!Equals ["prod", !Ref Environment], !Equals ["prd", !Ref Environment]]

Mappings:

    # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # https://repl.it/@abiralshakya/lastestecsamicloudformationyaml?lite=true

    AWSRegionToAMI:
        ap-northeast-1:
            AMI: ami-0b37663be8bbe0d3a
        ap-northeast-2:
            AMI: ami-0e1789b579cf905bf
        ap-south-1:
            AMI: ami-00925cf783e2e8fa0
        ap-southeast-1:
            AMI: ami-0868ea3484cc0cd39
        ap-southeast-2:
            AMI: ami-04d525f01efc24268
        ca-central-1:
            AMI: ami-0d797597b39c09784
        eu-central-1:
            AMI: ami-0e4ccc6bc8b6243c4
        eu-north-1:
            AMI: ami-04f5a7cba4ff05434
        eu-west-1:
            AMI: ami-001085c9389955bb6
        eu-west-2:
            AMI: ami-042dad9866b3cb091
        eu-west-3:
            AMI: ami-0ef426807a3b85415
        sa-east-1:
            AMI: ami-0e67d868ae66a74be
        us-east-1:
            AMI: ami-031507b307be48f22
        us-east-2:
            AMI: ami-06b0b1a4f330921e7
        us-gov-west-1:
            AMI: ami-cb84e9aa
        us-west-1:
            AMI: ami-089408c670f3e10c0
        us-west-2:
            AMI: ami-0956ec5e79bcaa784

    InstanceTypeToOnDemandPrice:
        t2.medium:
            price: 0.0536
        t2.large:
            price: 0.1072
        t2.xlarge:
            price: 0.2144
        t3.medium:
            price: 0.048
        t3.large:
            price: 0.096
        t3.xlarge:
            price: 0.384

Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: ECS-Cluster

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        CreationPolicy:
            ResourceSignal:
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 0
                MaxBatchSize: 1
                PauseTime: PT15M
                SuspendProcesses:
                  - HealthCheck
                  - ReplaceUnhealthy
                  - AZRebalance
                  - AlarmNotification
                  - ScheduledActions
                WaitOnResourceSignals: true
        Properties:
            DesiredCapacity: !Ref InitialClusterSize
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MaxSize: 10
            MinSize: 1
            Tags:
                - Key: Name
                  Value: ECS-Host
                  PropagateAtLaunch: true
            VPCZoneIdentifier: !Ref Subnets

    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            IamInstanceProfile: !Ref ECSInstanceProfile
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref ECSHostInstanceType
            KeyName: !If [EC2HostSSHKeyNameProvided, !Ref EC2HostSSHKeyName, !Ref "AWS::NoValue"]
            SecurityGroups:
                - !Ref SecurityGroup
            SpotPrice: !If [ IsProd, !Ref "AWS::NoValue", !FindInMap [InstanceTypeToOnDemandPrice, !Ref ECSHostInstanceType, price] ]
            UserData:
                #Ensures the latest aws helper scripts are installed
                "Fn::Base64": !Sub |
                    Content-Type: multipart/mixed; boundary="==BOUNDARY=="
                    MIME-Version: 1.0

                    --==BOUNDARY==
                    Content-Type: text/cloud-boothook; charset="us-ascii"

                    # Install nfs-utils
                    cloud-init-per once install_nfs_utils yum install -y nfs-utils

                    # Create /efs folder
                    cloud-init-per once mkdir_efs mkdir /efs

                    # Mount /efs
                    cloud-init-per once mount_efs echo -e '${EFSFileSystemID}.efs.${AWS::Region}.amazonaws.com:/ /efs nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0' >> /etc/fstab
                    mount -a

                    --==BOUNDARY==
                    Content-Type: text/x-shellscript; charset="us-ascii"

                    #!/bin/bash
                    yum install -y aws-cfn-bootstrap aws-cli jq
                    aws s3 cp s3://${ECSBucket}/ecs-auth.config /etc/ecs/ecs.config
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

                    --==BOUNDARY==--

        #See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
        Metadata:
            AWS::CloudFormation::Init:
                config:
                    commands:
                        01_add_instance_to_cluster:
                            #Register instance with cluster
                            command: !Sub |
                                echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

                    files:
                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}

                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

                    services:
                        sysvinit:
                            cfn-hup:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref ECSHostRole

Outputs:

    Cluster:
        Value: !Ref ECSCluster
        Export:
            Name: "ecs-infra:ECS-Cluster"
