#
# MIT License
#
# Copyright (c) 2018 IxorTalk CVBA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

AWSTemplateFormatVersion: "2010-09-09"

Description: >
    This IxorTalk template contains the security groups required by our entire stack.
    We create them in a separate nested template, so they can be referenced
    by all of the other nested templates.

Parameters:

    VPC:
        Type: AWS::EC2::VPC::Id
        Description: Choose which VPC the security groups should be deployed to

    BastionIngressCidrIp:
        Type: String
        Default: "0.0.0.0/0"
        AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(/([0-9]|[1-2][0-9]|3[0-2]))?$

    VpcCIDR:
        Type: String
        AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(/([0-9]|[1-2][0-9]|3[0-2]))?$

Resources:

    ECSHostSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
            GroupName: ECS-Host-Securitygroup
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 32768
                  ToPort: 60999
                  SourceSecurityGroupId: !Ref InternalLBSecurityGroup
                - IpProtocol: tcp
                  FromPort: 32768
                  ToPort: 60999
                  SourceSecurityGroupId: !Ref ExternalLBSecurityGroup
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  SourceSecurityGroupId: !Ref BastionHostSecurityGroup

    InternalLBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Access to the internal LB
            GroupName: Internal-Loadbalancer-Securitygroup

    InternalLBHTTPSSecurityGroupIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: !Ref InternalLBSecurityGroup
            SourceSecurityGroupId: !Ref ECSHostSecurityGroup
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443

    InternalLBHTTPSecurityGroupIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: !Ref InternalLBSecurityGroup
            SourceSecurityGroupId: !Ref ECSHostSecurityGroup
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80

    ExternalLBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Access to the load balancer that sits in front of ECS
            GroupName: External-Loadbalancer-Securitygroup
            SecurityGroupIngress:
                # Allow access from anywhere to our ECS services
                - CidrIp: 0.0.0.0/0
                  FromPort: 443
                  ToPort: 443
                  IpProtocol: tcp
                - CidrIp: 0.0.0.0/0
                  FromPort: 80
                  ToPort: 80
                  IpProtocol: tcp

    BastionHostSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Access to the bastion host
            GroupName: Bastionhost-Securitygroup
            SecurityGroupIngress:
                - CidrIp: !Ref BastionIngressCidrIp
                  IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22

    EFSMountTargetSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupName: EFS-SecurityGroup
          GroupDescription: Allow Access to EFS
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 2049
              ToPort: 2049
              CidrIp: !Ref VpcCIDR
          VpcId: !Ref VPC

Outputs:

    ECSHostSecurityGroup: 
        Value: !Ref ECSHostSecurityGroup
        Export:
            Name: "vpc:ECSHostSecurityGroup"

    InternalLBSecurityGroup:
        Value: !Ref InternalLBSecurityGroup
        Export:
            Name: "vpc:InternalLBSecurityGroup"

    ExternalLBSecurityGroup:
        Value: !Ref ExternalLBSecurityGroup
        Export:
            Name: "vpc:ExternalLBSecurityGroup"

    BastionHostSecurityGroup:
        Value: !Ref BastionHostSecurityGroup
        Export:
            Name: "vpc:BastionHostSecurityGroup"

    EFSMountTargetSecurityGroup:
        Value: !Ref EFSMountTargetSecurityGroup
        Export:
            Name: "vpc:EFSMountTargetSecurityGroup"
